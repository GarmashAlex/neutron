// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/revenue/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the parameters for the module.
type Params struct {
	// The compensation amount measured in USD.
	BaseCompensation uint64 `protobuf:"varint,1,opt,name=base_compensation,json=baseCompensation,proto3" json:"base_compensation,omitempty"`
	// Specifies performance requirements for validators in scope of blocks signing and creation. If
	// not met, the validator is not rewarded.
	BlocksPerformanceRequirement *PerformanceRequirement `protobuf:"bytes,2,opt,name=blocks_performance_requirement,json=blocksPerformanceRequirement,proto3" json:"blocks_performance_requirement,omitempty"`
	// Specifies performance requirements for validators in scope of the oracle price votes. If not
	// met, the validator is not rewarded.
	OracleVotesPerformanceRequirement *PerformanceRequirement `protobuf:"bytes,3,opt,name=oracle_votes_performance_requirement,json=oracleVotesPerformanceRequirement,proto3" json:"oracle_votes_performance_requirement,omitempty"`
	// Indicates the currently active type of payment schedule.
	//
	// Types that are valid to be assigned to PaymentScheduleType:
	//	*Params_MonthlyPaymentScheduleType
	//	*Params_BlockBasedPaymentScheduleType
	//	*Params_EmptyPaymentScheduleType
	PaymentScheduleType isParams_PaymentScheduleType `protobuf_oneof:"payment_schedule_type"`
	// The time window, in seconds, used to calculate the TWAP of the reward asset.
	TwapWindow int64 `protobuf:"varint,7,opt,name=twap_window,json=twapWindow,proto3" json:"twap_window,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e318e374514628b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type isParams_PaymentScheduleType interface {
	isParams_PaymentScheduleType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Params_MonthlyPaymentScheduleType struct {
	MonthlyPaymentScheduleType *MonthlyPaymentScheduleType `protobuf:"bytes,4,opt,name=monthly_payment_schedule_type,json=monthlyPaymentScheduleType,proto3,oneof" json:"monthly_payment_schedule_type,omitempty"`
}
type Params_BlockBasedPaymentScheduleType struct {
	BlockBasedPaymentScheduleType *BlockBasedPaymentScheduleType `protobuf:"bytes,5,opt,name=block_based_payment_schedule_type,json=blockBasedPaymentScheduleType,proto3,oneof" json:"block_based_payment_schedule_type,omitempty"`
}
type Params_EmptyPaymentScheduleType struct {
	EmptyPaymentScheduleType *EmptyPaymentScheduleType `protobuf:"bytes,6,opt,name=empty_payment_schedule_type,json=emptyPaymentScheduleType,proto3,oneof" json:"empty_payment_schedule_type,omitempty"`
}

func (*Params_MonthlyPaymentScheduleType) isParams_PaymentScheduleType()    {}
func (*Params_BlockBasedPaymentScheduleType) isParams_PaymentScheduleType() {}
func (*Params_EmptyPaymentScheduleType) isParams_PaymentScheduleType()      {}

func (m *Params) GetPaymentScheduleType() isParams_PaymentScheduleType {
	if m != nil {
		return m.PaymentScheduleType
	}
	return nil
}

func (m *Params) GetBaseCompensation() uint64 {
	if m != nil {
		return m.BaseCompensation
	}
	return 0
}

func (m *Params) GetBlocksPerformanceRequirement() *PerformanceRequirement {
	if m != nil {
		return m.BlocksPerformanceRequirement
	}
	return nil
}

func (m *Params) GetOracleVotesPerformanceRequirement() *PerformanceRequirement {
	if m != nil {
		return m.OracleVotesPerformanceRequirement
	}
	return nil
}

func (m *Params) GetMonthlyPaymentScheduleType() *MonthlyPaymentScheduleType {
	if x, ok := m.GetPaymentScheduleType().(*Params_MonthlyPaymentScheduleType); ok {
		return x.MonthlyPaymentScheduleType
	}
	return nil
}

func (m *Params) GetBlockBasedPaymentScheduleType() *BlockBasedPaymentScheduleType {
	if x, ok := m.GetPaymentScheduleType().(*Params_BlockBasedPaymentScheduleType); ok {
		return x.BlockBasedPaymentScheduleType
	}
	return nil
}

func (m *Params) GetEmptyPaymentScheduleType() *EmptyPaymentScheduleType {
	if x, ok := m.GetPaymentScheduleType().(*Params_EmptyPaymentScheduleType); ok {
		return x.EmptyPaymentScheduleType
	}
	return nil
}

func (m *Params) GetTwapWindow() int64 {
	if m != nil {
		return m.TwapWindow
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Params) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Params_MonthlyPaymentScheduleType)(nil),
		(*Params_BlockBasedPaymentScheduleType)(nil),
		(*Params_EmptyPaymentScheduleType)(nil),
	}
}

// Monthly periods with payments made at the end of each month.
type MonthlyPaymentScheduleType struct {
}

func (m *MonthlyPaymentScheduleType) Reset()         { *m = MonthlyPaymentScheduleType{} }
func (m *MonthlyPaymentScheduleType) String() string { return proto.CompactTextString(m) }
func (*MonthlyPaymentScheduleType) ProtoMessage()    {}
func (*MonthlyPaymentScheduleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e318e374514628b, []int{1}
}
func (m *MonthlyPaymentScheduleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonthlyPaymentScheduleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonthlyPaymentScheduleType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonthlyPaymentScheduleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonthlyPaymentScheduleType.Merge(m, src)
}
func (m *MonthlyPaymentScheduleType) XXX_Size() int {
	return m.Size()
}
func (m *MonthlyPaymentScheduleType) XXX_DiscardUnknown() {
	xxx_messageInfo_MonthlyPaymentScheduleType.DiscardUnknown(m)
}

var xxx_messageInfo_MonthlyPaymentScheduleType proto.InternalMessageInfo

// Periods defined by a specific number of blocks, with payments made when the required block
// count is reached.
type BlockBasedPaymentScheduleType struct {
	// The number of blocks in a payment period.
	BlocksPerPeriod uint64 `protobuf:"varint,1,opt,name=blocks_per_period,json=blocksPerPeriod,proto3" json:"blocks_per_period,omitempty"`
}

func (m *BlockBasedPaymentScheduleType) Reset()         { *m = BlockBasedPaymentScheduleType{} }
func (m *BlockBasedPaymentScheduleType) String() string { return proto.CompactTextString(m) }
func (*BlockBasedPaymentScheduleType) ProtoMessage()    {}
func (*BlockBasedPaymentScheduleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e318e374514628b, []int{2}
}
func (m *BlockBasedPaymentScheduleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockBasedPaymentScheduleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockBasedPaymentScheduleType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockBasedPaymentScheduleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockBasedPaymentScheduleType.Merge(m, src)
}
func (m *BlockBasedPaymentScheduleType) XXX_Size() int {
	return m.Size()
}
func (m *BlockBasedPaymentScheduleType) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockBasedPaymentScheduleType.DiscardUnknown(m)
}

var xxx_messageInfo_BlockBasedPaymentScheduleType proto.InternalMessageInfo

func (m *BlockBasedPaymentScheduleType) GetBlocksPerPeriod() uint64 {
	if m != nil {
		return m.BlocksPerPeriod
	}
	return 0
}

// Endless periods with payments never made.
type EmptyPaymentScheduleType struct {
}

func (m *EmptyPaymentScheduleType) Reset()         { *m = EmptyPaymentScheduleType{} }
func (m *EmptyPaymentScheduleType) String() string { return proto.CompactTextString(m) }
func (*EmptyPaymentScheduleType) ProtoMessage()    {}
func (*EmptyPaymentScheduleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e318e374514628b, []int{3}
}
func (m *EmptyPaymentScheduleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyPaymentScheduleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyPaymentScheduleType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyPaymentScheduleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyPaymentScheduleType.Merge(m, src)
}
func (m *EmptyPaymentScheduleType) XXX_Size() int {
	return m.Size()
}
func (m *EmptyPaymentScheduleType) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyPaymentScheduleType.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyPaymentScheduleType proto.InternalMessageInfo

// Specifies a performance criteria that validators must meet to qualify for network rewards.
type PerformanceRequirement struct {
	// The fraction of the total performance a validator can miss without affecting their reward.
	// Represented as a decimal value in the range [0.0, 1.0], where 1.0 corresponds to 100%.
	AllowedToMiss cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=allowed_to_miss,json=allowedToMiss,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"allowed_to_miss"`
	// The minimum fraction of the total performance a validator must achieve to be eligible for
	// network rewards. Validators falling below this threshold will not receive any rewards.
	// Represented as a decimal value in the range [0.0, 1.0], where 1.0 corresponds to 100%.
	RequiredAtLeast cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=required_at_least,json=requiredAtLeast,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"required_at_least"`
}

func (m *PerformanceRequirement) Reset()         { *m = PerformanceRequirement{} }
func (m *PerformanceRequirement) String() string { return proto.CompactTextString(m) }
func (*PerformanceRequirement) ProtoMessage()    {}
func (*PerformanceRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e318e374514628b, []int{4}
}
func (m *PerformanceRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerformanceRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerformanceRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerformanceRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformanceRequirement.Merge(m, src)
}
func (m *PerformanceRequirement) XXX_Size() int {
	return m.Size()
}
func (m *PerformanceRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformanceRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_PerformanceRequirement proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "neutron.revenue.Params")
	proto.RegisterType((*MonthlyPaymentScheduleType)(nil), "neutron.revenue.MonthlyPaymentScheduleType")
	proto.RegisterType((*BlockBasedPaymentScheduleType)(nil), "neutron.revenue.BlockBasedPaymentScheduleType")
	proto.RegisterType((*EmptyPaymentScheduleType)(nil), "neutron.revenue.EmptyPaymentScheduleType")
	proto.RegisterType((*PerformanceRequirement)(nil), "neutron.revenue.PerformanceRequirement")
}

func init() { proto.RegisterFile("neutron/revenue/params.proto", fileDescriptor_7e318e374514628b) }

var fileDescriptor_7e318e374514628b = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xb6, 0x7f, 0xed, 0x2f, 0x88, 0xad, 0x50, 0x88, 0xc5, 0x9f, 0x90, 0xb6, 0x4e, 0x1b, 0x21,
	0xf5, 0xbf, 0xad, 0x80, 0xb8, 0x70, 0x23, 0x14, 0xa9, 0x52, 0x5b, 0x29, 0x32, 0x15, 0x08, 0x24,
	0xb4, 0x5a, 0xdb, 0x43, 0x62, 0xd5, 0xeb, 0x31, 0xde, 0x4d, 0xd2, 0xbc, 0x05, 0xc7, 0x1e, 0xfb,
	0x02, 0x48, 0x08, 0xf1, 0x10, 0x3d, 0x70, 0xa8, 0x7a, 0x42, 0x1c, 0x2a, 0xd4, 0x1e, 0x78, 0x0d,
	0xb4, 0xb6, 0xdb, 0xa2, 0x36, 0x8e, 0x04, 0x07, 0x5b, 0xbb, 0xf3, 0xcd, 0x7c, 0xf3, 0xed, 0xec,
	0xce, 0x90, 0x99, 0x08, 0x7a, 0x32, 0xc1, 0xc8, 0x4e, 0xa0, 0x0f, 0x51, 0x0f, 0xec, 0x98, 0x25,
	0x8c, 0x0b, 0x2b, 0x4e, 0x50, 0xa2, 0x51, 0xce, 0x51, 0x2b, 0x47, 0x6b, 0x15, 0xc6, 0x83, 0x08,
	0xed, 0xf4, 0x9f, 0xf9, 0xd4, 0x4c, 0x0f, 0x05, 0x47, 0x61, 0xbb, 0x4c, 0x80, 0xdd, 0x6f, 0xba,
	0x20, 0x59, 0xd3, 0xf6, 0x30, 0x88, 0x72, 0xfc, 0x41, 0x86, 0xd3, 0x74, 0x67, 0x67, 0x9b, 0x1c,
	0xba, 0xd3, 0xc1, 0x0e, 0x66, 0x76, 0xb5, 0xca, 0xac, 0x8d, 0x6f, 0x25, 0x52, 0x6a, 0xa7, 0x2a,
	0x8c, 0x15, 0x52, 0x51, 0xb4, 0xd4, 0x43, 0x1e, 0x43, 0x24, 0x98, 0x0c, 0x30, 0xaa, 0xea, 0x73,
	0xfa, 0xe2, 0xa4, 0x73, 0x5b, 0x01, 0xcf, 0xff, 0xb0, 0x1b, 0x9c, 0x98, 0x6e, 0x88, 0xde, 0xae,
	0xa0, 0x31, 0x24, 0xef, 0x31, 0xe1, 0x2c, 0xf2, 0x80, 0x26, 0xf0, 0xa1, 0x17, 0x24, 0xc0, 0x21,
	0x92, 0xd5, 0xff, 0xe6, 0xf4, 0xc5, 0xa9, 0x47, 0x0b, 0xd6, 0x95, 0x53, 0x59, 0xed, 0x4b, 0x7f,
	0xe7, 0xd2, 0xdd, 0x99, 0xc9, 0xe8, 0x46, 0xa3, 0xc6, 0x1e, 0x79, 0x88, 0x09, 0xf3, 0x42, 0xa0,
	0x7d, 0x94, 0x50, 0x9c, 0x74, 0xe2, 0xef, 0x92, 0xce, 0x67, 0xa4, 0xaf, 0x14, 0x67, 0x41, 0xe6,
	0x03, 0x9d, 0xcc, 0x72, 0x8c, 0x64, 0x37, 0x1c, 0xd2, 0x98, 0x0d, 0x95, 0x8d, 0x0a, 0xaf, 0x0b,
	0x7e, 0x2f, 0x04, 0x2a, 0x87, 0x31, 0x54, 0x27, 0xd3, 0x9c, 0x2b, 0xd7, 0x72, 0x6e, 0x67, 0x51,
	0xed, 0x2c, 0xe8, 0x65, 0x1e, 0xb3, 0x33, 0x8c, 0xa1, 0x65, 0x7d, 0xf9, 0xf5, 0x79, 0x79, 0xe9,
	0xfc, 0x15, 0x64, 0xf5, 0xb7, 0x8b, 0xfd, 0x37, 0x34, 0xa7, 0xc6, 0x0b, 0x51, 0xe3, 0x93, 0x4e,
	0xe6, 0xd3, 0xea, 0x51, 0x75, 0x4d, 0x7e, 0x81, 0xcc, 0xff, 0x53, 0x99, 0xd6, 0x35, 0x99, 0x2d,
	0x15, 0xd9, 0x52, 0x81, 0xa3, 0x94, 0x36, 0x95, 0xd2, 0xd5, 0x2b, 0x4a, 0xc7, 0x86, 0x6c, 0x68,
	0xce, 0xac, 0x3b, 0xce, 0xc1, 0xd8, 0xd7, 0xc9, 0x34, 0xf0, 0x58, 0x16, 0x15, 0xb4, 0x94, 0x2a,
	0x5d, 0xba, 0xa6, 0xf4, 0x85, 0x8a, 0x19, 0x25, 0x72, 0x55, 0x89, 0x5c, 0xb8, 0x22, 0xb2, 0xc8,
	0x7b, 0x43, 0x73, 0xaa, 0x50, 0x80, 0x19, 0x75, 0x32, 0x25, 0x07, 0x2c, 0xa6, 0x83, 0x20, 0xf2,
	0x71, 0x50, 0xbd, 0x31, 0xa7, 0x2f, 0x4e, 0x38, 0x44, 0x99, 0x5e, 0xa7, 0x96, 0xa7, 0x93, 0xfb,
	0x07, 0x75, 0xad, 0x75, 0x9f, 0xdc, 0x1d, 0x29, 0xbd, 0x31, 0x43, 0x6a, 0xc5, 0xd7, 0xd8, 0xd8,
	0x24, 0xb3, 0x63, 0x4b, 0x67, 0x2c, 0x93, 0xca, 0x65, 0x57, 0xa9, 0x2f, 0x40, 0x3f, 0x6f, 0xc1,
	0xf2, 0x45, 0x7f, 0xb4, 0x53, 0x73, 0xa3, 0x46, 0xaa, 0x45, 0x47, 0x6c, 0x1c, 0xeb, 0xe4, 0x5e,
	0xc1, 0x7b, 0x7e, 0x43, 0xca, 0x2c, 0x0c, 0x71, 0x00, 0x3e, 0x95, 0x48, 0x79, 0x20, 0x44, 0x9a,
	0xe0, 0x66, 0xab, 0x79, 0x78, 0x52, 0xd7, 0x7e, 0x9c, 0xd4, 0xa7, 0xb3, 0xa9, 0x21, 0xfc, 0x5d,
	0x2b, 0x40, 0x9b, 0x33, 0xd9, 0xb5, 0xb6, 0xa0, 0xc3, 0xbc, 0xe1, 0x3a, 0x78, 0xc7, 0x5f, 0xd7,
	0x48, 0x3e, 0x54, 0xd6, 0xc1, 0x73, 0x6e, 0xe5, 0x4c, 0x3b, 0xb8, 0x1d, 0x08, 0x61, 0xbc, 0x23,
	0x95, 0xbc, 0x17, 0x7d, 0xca, 0x24, 0x0d, 0x81, 0x89, 0x6c, 0x0c, 0xfc, 0x13, 0x79, 0xf9, 0x9c,
	0xeb, 0x99, 0xdc, 0x52, 0x4c, 0xad, 0xcd, 0xc3, 0x53, 0x53, 0x3f, 0x3a, 0x35, 0xf5, 0x9f, 0xa7,
	0xa6, 0xfe, 0xf1, 0xcc, 0xd4, 0x8e, 0xce, 0x4c, 0xed, 0xfb, 0x99, 0xa9, 0xbd, 0x6d, 0x76, 0x02,
	0xd9, 0xed, 0xb9, 0x96, 0x87, 0xdc, 0xce, 0x1f, 0xcd, 0x1a, 0x26, 0x9d, 0xf3, 0xb5, 0xdd, 0x7f,
	0x62, 0xef, 0x5d, 0xcc, 0x5c, 0x75, 0x4f, 0xc2, 0x2d, 0xa5, 0xe3, 0xef, 0xf1, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc0, 0xf7, 0xd9, 0xac, 0x93, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TwapWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TwapWindow))
		i--
		dAtA[i] = 0x38
	}
	if m.PaymentScheduleType != nil {
		{
			size := m.PaymentScheduleType.Size()
			i -= size
			if _, err := m.PaymentScheduleType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OracleVotesPerformanceRequirement != nil {
		{
			size, err := m.OracleVotesPerformanceRequirement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlocksPerformanceRequirement != nil {
		{
			size, err := m.BlocksPerformanceRequirement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseCompensation != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BaseCompensation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params_MonthlyPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params_MonthlyPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MonthlyPaymentScheduleType != nil {
		{
			size, err := m.MonthlyPaymentScheduleType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Params_BlockBasedPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params_BlockBasedPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockBasedPaymentScheduleType != nil {
		{
			size, err := m.BlockBasedPaymentScheduleType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Params_EmptyPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params_EmptyPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmptyPaymentScheduleType != nil {
		{
			size, err := m.EmptyPaymentScheduleType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MonthlyPaymentScheduleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthlyPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonthlyPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BlockBasedPaymentScheduleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockBasedPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockBasedPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerPeriod != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BlocksPerPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmptyPaymentScheduleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyPaymentScheduleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyPaymentScheduleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PerformanceRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerformanceRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerformanceRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RequiredAtLeast.Size()
		i -= size
		if _, err := m.RequiredAtLeast.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AllowedToMiss.Size()
		i -= size
		if _, err := m.AllowedToMiss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseCompensation != 0 {
		n += 1 + sovParams(uint64(m.BaseCompensation))
	}
	if m.BlocksPerformanceRequirement != nil {
		l = m.BlocksPerformanceRequirement.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.OracleVotesPerformanceRequirement != nil {
		l = m.OracleVotesPerformanceRequirement.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.PaymentScheduleType != nil {
		n += m.PaymentScheduleType.Size()
	}
	if m.TwapWindow != 0 {
		n += 1 + sovParams(uint64(m.TwapWindow))
	}
	return n
}

func (m *Params_MonthlyPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonthlyPaymentScheduleType != nil {
		l = m.MonthlyPaymentScheduleType.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}
func (m *Params_BlockBasedPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockBasedPaymentScheduleType != nil {
		l = m.BlockBasedPaymentScheduleType.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}
func (m *Params_EmptyPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmptyPaymentScheduleType != nil {
		l = m.EmptyPaymentScheduleType.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}
func (m *MonthlyPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BlockBasedPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlocksPerPeriod != 0 {
		n += 1 + sovParams(uint64(m.BlocksPerPeriod))
	}
	return n
}

func (m *EmptyPaymentScheduleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PerformanceRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AllowedToMiss.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.RequiredAtLeast.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCompensation", wireType)
			}
			m.BaseCompensation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseCompensation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerformanceRequirement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlocksPerformanceRequirement == nil {
				m.BlocksPerformanceRequirement = &PerformanceRequirement{}
			}
			if err := m.BlocksPerformanceRequirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleVotesPerformanceRequirement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleVotesPerformanceRequirement == nil {
				m.OracleVotesPerformanceRequirement = &PerformanceRequirement{}
			}
			if err := m.OracleVotesPerformanceRequirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthlyPaymentScheduleType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MonthlyPaymentScheduleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentScheduleType = &Params_MonthlyPaymentScheduleType{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBasedPaymentScheduleType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockBasedPaymentScheduleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentScheduleType = &Params_BlockBasedPaymentScheduleType{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyPaymentScheduleType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyPaymentScheduleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PaymentScheduleType = &Params_EmptyPaymentScheduleType{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapWindow", wireType)
			}
			m.TwapWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwapWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthlyPaymentScheduleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlyPaymentScheduleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlyPaymentScheduleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockBasedPaymentScheduleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockBasedPaymentScheduleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockBasedPaymentScheduleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerPeriod", wireType)
			}
			m.BlocksPerPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyPaymentScheduleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyPaymentScheduleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyPaymentScheduleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerformanceRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformanceRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformanceRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedToMiss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllowedToMiss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAtLeast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredAtLeast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
