// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/state_verifier/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/neutron-org/neutron/v7/x/interchainqueries/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Describes a structure to verify storage values from the chain state from a particular height in the past
type QueryVerifyStateValuesRequest struct {
	// Refers to the block height to which the storage values belong.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// A slice of neutron.interchainqueries.StorageValue which relate to the specified height and must be verified against
	StorageValues []*types.StorageValue `protobuf:"bytes,2,rep,name=storage_values,json=storageValues,proto3" json:"storage_values,omitempty"`
}

func (m *QueryVerifyStateValuesRequest) Reset()         { *m = QueryVerifyStateValuesRequest{} }
func (m *QueryVerifyStateValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyStateValuesRequest) ProtoMessage()    {}
func (*QueryVerifyStateValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57fce5d311842a25, []int{0}
}
func (m *QueryVerifyStateValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyStateValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyStateValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyStateValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyStateValuesRequest.Merge(m, src)
}
func (m *QueryVerifyStateValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyStateValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyStateValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyStateValuesRequest proto.InternalMessageInfo

func (m *QueryVerifyStateValuesRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryVerifyStateValuesRequest) GetStorageValues() []*types.StorageValue {
	if m != nil {
		return m.StorageValues
	}
	return nil
}

// Describes a response structure for `VerifyStateValues` query
type QueryVerifyStateValuesResponse struct {
	// The field describes a validity of all the storage values passed to the request at a specific height
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryVerifyStateValuesResponse) Reset()         { *m = QueryVerifyStateValuesResponse{} }
func (m *QueryVerifyStateValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyStateValuesResponse) ProtoMessage()    {}
func (*QueryVerifyStateValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57fce5d311842a25, []int{1}
}
func (m *QueryVerifyStateValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyStateValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyStateValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyStateValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyStateValuesResponse.Merge(m, src)
}
func (m *QueryVerifyStateValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyStateValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyStateValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyStateValuesResponse proto.InternalMessageInfo

func (m *QueryVerifyStateValuesResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*QueryVerifyStateValuesRequest)(nil), "neutron.state_verifier.v1.QueryVerifyStateValuesRequest")
	proto.RegisterType((*QueryVerifyStateValuesResponse)(nil), "neutron.state_verifier.v1.QueryVerifyStateValuesResponse")
}

func init() {
	proto.RegisterFile("neutron/state_verifier/v1/query.proto", fileDescriptor_57fce5d311842a25)
}

var fileDescriptor_57fce5d311842a25 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0x2b, 0x31,
	0x14, 0x86, 0x9b, 0xde, 0xdb, 0x72, 0xc9, 0xe5, 0x5e, 0x70, 0x10, 0xa9, 0x45, 0x87, 0x32, 0x20,
	0x16, 0xa4, 0x09, 0x6d, 0x41, 0xeb, 0xd6, 0x07, 0x10, 0x9c, 0x42, 0x17, 0x6e, 0x4a, 0x5a, 0x8f,
	0x33, 0x81, 0x9a, 0x4c, 0x93, 0xcc, 0xd0, 0x6e, 0xdd, 0xb8, 0x15, 0x7c, 0x1e, 0xd7, 0xba, 0x2c,
	0xb8, 0x71, 0x29, 0xad, 0x0f, 0x22, 0x93, 0x69, 0xd5, 0x5a, 0xea, 0xc2, 0xe5, 0x81, 0xf3, 0x7d,
	0xff, 0x9f, 0x1c, 0xbc, 0x27, 0x20, 0x36, 0x4a, 0x0a, 0xaa, 0x0d, 0x33, 0xd0, 0x4d, 0x40, 0xf1,
	0x4b, 0x0e, 0x8a, 0x26, 0x75, 0x3a, 0x8c, 0x41, 0x8d, 0x49, 0xa4, 0xa4, 0x91, 0xce, 0xf6, 0x7c,
	0x8d, 0x2c, 0xaf, 0x91, 0xa4, 0x5e, 0xde, 0x09, 0xa4, 0x0c, 0x06, 0x40, 0x59, 0xc4, 0x29, 0x13,
	0x42, 0x1a, 0x66, 0xb8, 0x14, 0x3a, 0x03, 0xcb, 0xde, 0xc2, 0xcf, 0x85, 0x01, 0xd5, 0x0f, 0x19,
	0x17, 0xa9, 0x97, 0x83, 0xa6, 0x66, 0x94, 0xed, 0x78, 0x37, 0x08, 0xef, 0x9e, 0xa5, 0x61, 0x9d,
	0x54, 0x3b, 0x6e, 0xa7, 0x11, 0x1d, 0x36, 0x88, 0x41, 0xfb, 0x30, 0x8c, 0x41, 0x1b, 0x67, 0x0b,
	0x17, 0x43, 0xe0, 0x41, 0x68, 0x4a, 0xa8, 0x82, 0xaa, 0xbf, 0xfd, 0xf9, 0xe4, 0x9c, 0xe2, 0xff,
	0xda, 0x48, 0xc5, 0x02, 0xe8, 0x26, 0x16, 0x28, 0xe5, 0x2b, 0xbf, 0xaa, 0x7f, 0x1b, 0xfb, 0x64,
	0xd1, 0x77, 0x25, 0x96, 0xb4, 0x33, 0xc0, 0x06, 0xf8, 0xff, 0xf4, 0xa7, 0x49, 0x7b, 0x87, 0xd8,
	0x5d, 0x57, 0x44, 0x47, 0x52, 0x68, 0x70, 0x36, 0x71, 0x21, 0x61, 0x03, 0x7e, 0x61, 0x8b, 0xfc,
	0xf1, 0xb3, 0xa1, 0xf1, 0x80, 0x70, 0xc1, 0x82, 0xce, 0x3d, 0xc2, 0x1b, 0x2b, 0xb4, 0xd3, 0x22,
	0x6b, 0xff, 0x8f, 0x7c, 0xfb, 0xf2, 0xf2, 0xf1, 0x0f, 0xc8, 0xac, 0xaa, 0xd7, 0xbc, 0x7e, 0x7a,
	0xbd, 0xcb, 0xd7, 0x9c, 0x03, 0xba, 0x74, 0xe3, 0xda, 0xc7, 0x8d, 0x2d, 0xda, 0x9d, 0x8b, 0x2d,
	0x7c, 0xe2, 0x3f, 0x4e, 0x5d, 0x34, 0x99, 0xba, 0xe8, 0x65, 0xea, 0xa2, 0xdb, 0x99, 0x9b, 0x9b,
	0xcc, 0xdc, 0xdc, 0xf3, 0xcc, 0xcd, 0x9d, 0xb7, 0x02, 0x6e, 0xc2, 0xb8, 0x47, 0xfa, 0xf2, 0x6a,
	0x21, 0xac, 0x49, 0x15, 0xbc, 0xcb, 0x93, 0x23, 0x3a, 0xfa, 0x9a, 0x60, 0xc6, 0x11, 0xe8, 0x5e,
	0xd1, 0x9e, 0xb9, 0xf9, 0x16, 0x00, 0x00, 0xff, 0xff, 0x85, 0xdf, 0xd6, 0x7e, 0x6c, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Verifies the values and returns an error if values cannot be verified. The query returns `QueryVerifyStateValuesResponse` response.
	VerifyStateValues(ctx context.Context, in *QueryVerifyStateValuesRequest, opts ...grpc.CallOption) (*QueryVerifyStateValuesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VerifyStateValues(ctx context.Context, in *QueryVerifyStateValuesRequest, opts ...grpc.CallOption) (*QueryVerifyStateValuesResponse, error) {
	out := new(QueryVerifyStateValuesResponse)
	err := c.cc.Invoke(ctx, "/neutron.state_verifier.v1.Query/VerifyStateValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Verifies the values and returns an error if values cannot be verified. The query returns `QueryVerifyStateValuesResponse` response.
	VerifyStateValues(context.Context, *QueryVerifyStateValuesRequest) (*QueryVerifyStateValuesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) VerifyStateValues(ctx context.Context, req *QueryVerifyStateValuesRequest) (*QueryVerifyStateValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStateValues not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_VerifyStateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyStateValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyStateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.state_verifier.v1.Query/VerifyStateValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyStateValues(ctx, req.(*QueryVerifyStateValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.state_verifier.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyStateValues",
			Handler:    _Query_VerifyStateValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neutron/state_verifier/v1/query.proto",
}

func (m *QueryVerifyStateValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyStateValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyStateValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageValues) > 0 {
		for iNdEx := len(m.StorageValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StorageValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyStateValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyStateValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyStateValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVerifyStateValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.StorageValues) > 0 {
		for _, e := range m.StorageValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVerifyStateValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVerifyStateValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyStateValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyStateValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageValues = append(m.StorageValues, &types.StorageValue{})
			if err := m.StorageValues[len(m.StorageValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyStateValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyStateValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyStateValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
