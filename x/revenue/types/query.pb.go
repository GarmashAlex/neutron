// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/revenue/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// Response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// Contains all parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Request type for the Query/PaymentInfo RPC method.
type QueryPaymentInfoRequest struct {
}

func (m *QueryPaymentInfoRequest) Reset()         { *m = QueryPaymentInfoRequest{} }
func (m *QueryPaymentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentInfoRequest) ProtoMessage()    {}
func (*QueryPaymentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{2}
}
func (m *QueryPaymentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentInfoRequest.Merge(m, src)
}
func (m *QueryPaymentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentInfoRequest proto.InternalMessageInfo

// Response type for the Query/PaymentInfo RPC method.
type QueryPaymentInfoResponse struct {
	// The current payment schedule.
	PaymentSchedule PaymentSchedule `protobuf:"bytes,1,opt,name=payment_schedule,json=paymentSchedule,proto3" json:"payment_schedule"`
	// Revenue amount multiplier value that corresponds to the effective progress of the payment period.
	EffectivePeriodProgress cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=effective_period_progress,json=effectivePeriodProgress,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"effective_period_progress"`
	// The denom used in revenue payments.
	RewardDenom string `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	// The current TWAP of the reward denom in USD. Is calculated as:
	// twap_from_time_t(n)_to_time_t(m) = (cumulative_price_at_t(n) - cumulative_price_at_t(m)) / (t(n) - t(m))
	RewardDenomTwap cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=reward_denom_twap,json=rewardDenomTwap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_denom_twap"`
	// The current evaluation of the base revenue amount. This whole amount will be paid to the
	// validators with impeccable performance (at least as good as allowed_to_miss). For the others
	// this amount will be multiplied by their performance rating.
	BaseRevenueAmount cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=base_revenue_amount,json=baseRevenueAmount,proto3,customtype=cosmossdk.io/math.Int" json:"base_revenue_amount"`
}

func (m *QueryPaymentInfoResponse) Reset()         { *m = QueryPaymentInfoResponse{} }
func (m *QueryPaymentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentInfoResponse) ProtoMessage()    {}
func (*QueryPaymentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{3}
}
func (m *QueryPaymentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentInfoResponse.Merge(m, src)
}
func (m *QueryPaymentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentInfoResponse proto.InternalMessageInfo

func (m *QueryPaymentInfoResponse) GetPaymentSchedule() PaymentSchedule {
	if m != nil {
		return m.PaymentSchedule
	}
	return PaymentSchedule{}
}

func (m *QueryPaymentInfoResponse) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

// Request type for the Query/ValidatorStats RPC method.
type QueryValidatorStatsRequest struct {
	// The validator's node operator address.
	ValOperAddress string `protobuf:"bytes,1,opt,name=val_oper_address,json=valOperAddress,proto3" json:"val_oper_address,omitempty"`
}

func (m *QueryValidatorStatsRequest) Reset()         { *m = QueryValidatorStatsRequest{} }
func (m *QueryValidatorStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorStatsRequest) ProtoMessage()    {}
func (*QueryValidatorStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{4}
}
func (m *QueryValidatorStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorStatsRequest.Merge(m, src)
}
func (m *QueryValidatorStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorStatsRequest proto.InternalMessageInfo

func (m *QueryValidatorStatsRequest) GetValOperAddress() string {
	if m != nil {
		return m.ValOperAddress
	}
	return ""
}

// Response type for the Query/ValidatorStats RPC method.
type QueryValidatorStatsResponse struct {
	// Contains the validator's information.
	Stats ValidatorStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats"`
}

func (m *QueryValidatorStatsResponse) Reset()         { *m = QueryValidatorStatsResponse{} }
func (m *QueryValidatorStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorStatsResponse) ProtoMessage()    {}
func (*QueryValidatorStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{5}
}
func (m *QueryValidatorStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorStatsResponse.Merge(m, src)
}
func (m *QueryValidatorStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorStatsResponse proto.InternalMessageInfo

func (m *QueryValidatorStatsResponse) GetStats() ValidatorStats {
	if m != nil {
		return m.Stats
	}
	return ValidatorStats{}
}

// Request type for the Query/ValidatorsStats RPC method.
type QueryValidatorsStatsRequest struct {
}

func (m *QueryValidatorsStatsRequest) Reset()         { *m = QueryValidatorsStatsRequest{} }
func (m *QueryValidatorsStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsStatsRequest) ProtoMessage()    {}
func (*QueryValidatorsStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{6}
}
func (m *QueryValidatorsStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsStatsRequest.Merge(m, src)
}
func (m *QueryValidatorsStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsStatsRequest proto.InternalMessageInfo

// Response type for the Query/ValidatorsStats RPC method.
type QueryValidatorsStatsResponse struct {
	// Contains the validators' information.
	Stats []ValidatorStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats"`
}

func (m *QueryValidatorsStatsResponse) Reset()         { *m = QueryValidatorsStatsResponse{} }
func (m *QueryValidatorsStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsStatsResponse) ProtoMessage()    {}
func (*QueryValidatorsStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{7}
}
func (m *QueryValidatorsStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsStatsResponse.Merge(m, src)
}
func (m *QueryValidatorsStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsStatsResponse proto.InternalMessageInfo

func (m *QueryValidatorsStatsResponse) GetStats() []ValidatorStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Contains validator's info and their performance rating.
type ValidatorStats struct {
	// Contains the validator's information.
	ValidatorInfo ValidatorInfo `protobuf:"bytes,1,opt,name=validator_info,json=validatorInfo,proto3" json:"validator_info"`
	// The total number of blocks produced by the chain in the current payment period.
	TotalProducedBlocksInPeriod uint64 `protobuf:"varint,2,opt,name=total_produced_blocks_in_period,json=totalProducedBlocksInPeriod,proto3" json:"total_produced_blocks_in_period,omitempty"`
	// The validator's performance rating. Represented as a decimal value.
	PerformanceRating cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=performance_rating,json=performanceRating,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"performance_rating"`
	// Contains expected revenue for the validator based on their performance rating in the current
	// payment period, current reward denom TWAP, and duration of validator's presence in the active
	// validator set. Does not take into account the payment period effective progress.
	ExpectedRevenue cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=expected_revenue,json=expectedRevenue,proto3,customtype=cosmossdk.io/math.Int" json:"expected_revenue"`
}

func (m *ValidatorStats) Reset()         { *m = ValidatorStats{} }
func (m *ValidatorStats) String() string { return proto.CompactTextString(m) }
func (*ValidatorStats) ProtoMessage()    {}
func (*ValidatorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0a7ecde965b0d6a, []int{8}
}
func (m *ValidatorStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStats.Merge(m, src)
}
func (m *ValidatorStats) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStats.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStats proto.InternalMessageInfo

func (m *ValidatorStats) GetValidatorInfo() ValidatorInfo {
	if m != nil {
		return m.ValidatorInfo
	}
	return ValidatorInfo{}
}

func (m *ValidatorStats) GetTotalProducedBlocksInPeriod() uint64 {
	if m != nil {
		return m.TotalProducedBlocksInPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "neutron.revenue.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "neutron.revenue.QueryParamsResponse")
	proto.RegisterType((*QueryPaymentInfoRequest)(nil), "neutron.revenue.QueryPaymentInfoRequest")
	proto.RegisterType((*QueryPaymentInfoResponse)(nil), "neutron.revenue.QueryPaymentInfoResponse")
	proto.RegisterType((*QueryValidatorStatsRequest)(nil), "neutron.revenue.QueryValidatorStatsRequest")
	proto.RegisterType((*QueryValidatorStatsResponse)(nil), "neutron.revenue.QueryValidatorStatsResponse")
	proto.RegisterType((*QueryValidatorsStatsRequest)(nil), "neutron.revenue.QueryValidatorsStatsRequest")
	proto.RegisterType((*QueryValidatorsStatsResponse)(nil), "neutron.revenue.QueryValidatorsStatsResponse")
	proto.RegisterType((*ValidatorStats)(nil), "neutron.revenue.ValidatorStats")
}

func init() { proto.RegisterFile("neutron/revenue/query.proto", fileDescriptor_e0a7ecde965b0d6a) }

var fileDescriptor_e0a7ecde965b0d6a = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6f, 0xdb, 0x36,
	0x18, 0x8d, 0xf2, 0x0b, 0x18, 0xb3, 0xd5, 0x09, 0x9b, 0x21, 0x8a, 0x93, 0xd8, 0xae, 0xba, 0x01,
	0x2e, 0x3a, 0x5b, 0x68, 0x87, 0x9e, 0x76, 0xaa, 0xe1, 0xc3, 0x82, 0x16, 0x98, 0xab, 0x0c, 0x3b,
	0xb4, 0x18, 0x54, 0x5a, 0xfa, 0xac, 0x08, 0xb5, 0x48, 0x95, 0xa4, 0x9c, 0xf8, 0xba, 0xdb, 0x6e,
	0x03, 0x86, 0x1d, 0xf6, 0x7f, 0xf4, 0x36, 0xec, 0xde, 0xdb, 0x8a, 0xee, 0x32, 0xec, 0x50, 0x0c,
	0xc9, 0xfe, 0x90, 0x41, 0x24, 0xd5, 0xda, 0x92, 0xd3, 0xa5, 0xb9, 0x18, 0xd6, 0xf7, 0x3d, 0xbe,
	0xf7, 0x44, 0x3e, 0x7e, 0x42, 0x7b, 0x14, 0x32, 0xc9, 0x19, 0x75, 0x39, 0x4c, 0x80, 0x66, 0xe0,
	0x3e, 0xcf, 0x80, 0x4f, 0xbb, 0x29, 0x67, 0x92, 0xe1, 0x9a, 0x69, 0x76, 0x4d, 0xb3, 0xbe, 0x45,
	0x92, 0x98, 0x32, 0x57, 0xfd, 0x6a, 0x4c, 0x7d, 0x37, 0x60, 0x22, 0x61, 0xc2, 0x57, 0x4f, 0xae,
	0x7e, 0x30, 0xad, 0xed, 0x88, 0x45, 0x4c, 0xd7, 0xf3, 0x7f, 0xa6, 0xba, 0x1f, 0x31, 0x16, 0x8d,
	0xc1, 0x25, 0x69, 0xec, 0x12, 0x4a, 0x99, 0x24, 0x32, 0x66, 0xb4, 0x58, 0x73, 0x50, 0xf6, 0x13,
	0x01, 0x05, 0x11, 0x17, 0xed, 0xfd, 0x72, 0x3b, 0x25, 0x9c, 0x24, 0x45, 0xd7, 0x2e, 0x77, 0xe5,
	0xa9, 0xee, 0x38, 0xdb, 0x08, 0x3f, 0xca, 0x5f, 0x6c, 0xa0, 0xe0, 0x1e, 0x3c, 0xcf, 0x40, 0x48,
	0xe7, 0x21, 0xba, 0x3e, 0x57, 0x15, 0x29, 0xa3, 0x02, 0xf0, 0x3d, 0xb4, 0xae, 0x69, 0x6d, 0xab,
	0x65, 0xb5, 0x37, 0xee, 0xee, 0x74, 0x4b, 0xfb, 0xd0, 0xd5, 0x0b, 0x7a, 0xab, 0x2f, 0xdf, 0x34,
	0x97, 0x3c, 0x03, 0x76, 0x76, 0xd1, 0x8e, 0x61, 0x9b, 0x26, 0x40, 0xe5, 0x21, 0x1d, 0xb1, 0x42,
	0xe8, 0xb7, 0x15, 0x64, 0x57, 0x7b, 0x46, 0xee, 0x11, 0xda, 0x4c, 0x75, 0xd9, 0x17, 0xc1, 0x31,
	0x84, 0xd9, 0x18, 0x8c, 0x70, 0x6b, 0x81, 0xb0, 0x02, 0x1e, 0x19, 0x9c, 0x71, 0x50, 0x4b, 0xe7,
	0xcb, 0x38, 0x41, 0xbb, 0x30, 0x1a, 0x41, 0x20, 0xe3, 0x09, 0xf8, 0x29, 0xf0, 0x98, 0x85, 0xf9,
	0x01, 0x45, 0x1c, 0x84, 0xb0, 0x97, 0x5b, 0x56, 0xfb, 0xa3, 0xde, 0x9d, 0x7c, 0xe5, 0xdf, 0x6f,
	0x9a, 0x7b, 0xfa, 0xc8, 0x44, 0xf8, 0xac, 0x1b, 0x33, 0x37, 0x21, 0xf2, 0xb8, 0xfb, 0x10, 0x22,
	0x12, 0x4c, 0xfb, 0x10, 0xbc, 0x7e, 0xd1, 0x41, 0xe6, 0x44, 0xfb, 0x10, 0x78, 0x3b, 0x6f, 0x39,
	0x07, 0x8a, 0x72, 0x60, 0x18, 0xf1, 0x0d, 0xf4, 0x31, 0x87, 0x13, 0xc2, 0x43, 0x3f, 0x04, 0xca,
	0x12, 0x7b, 0x25, 0x57, 0xf0, 0x36, 0x74, 0xad, 0x9f, 0x97, 0xf0, 0xf7, 0x68, 0x6b, 0x16, 0xe2,
	0xcb, 0x13, 0x92, 0xda, 0xab, 0x57, 0x75, 0x52, 0x9b, 0xa1, 0xfe, 0xf6, 0x84, 0xa4, 0xf8, 0x09,
	0xba, 0x3e, 0x24, 0x02, 0x7c, 0xb3, 0x4f, 0x3e, 0x49, 0x58, 0x46, 0xa5, 0xbd, 0xa6, 0x04, 0x6e,
	0x1b, 0x81, 0x4f, 0xab, 0x02, 0x87, 0x54, 0x96, 0xa8, 0xb7, 0x72, 0x1e, 0x4f, 0xd3, 0xdc, 0x57,
	0x2c, 0xce, 0x53, 0x54, 0x57, 0x87, 0xf7, 0x1d, 0x19, 0xc7, 0x21, 0x91, 0x8c, 0x1f, 0x49, 0x22,
	0x8b, 0x10, 0xe1, 0x1e, 0xda, 0x9c, 0x90, 0xb1, 0xcf, 0x52, 0xe0, 0x3e, 0x09, 0x43, 0xb5, 0xc5,
	0x96, 0xd2, 0xb5, 0x5f, 0xbf, 0xe8, 0x6c, 0x1b, 0xea, 0xfb, 0xba, 0x73, 0x24, 0x79, 0x4c, 0x23,
	0xef, 0xda, 0x84, 0x8c, 0xbf, 0x49, 0x81, 0x9b, 0xaa, 0xf3, 0x18, 0xed, 0x2d, 0x54, 0x30, 0x09,
	0xf9, 0x0a, 0xad, 0x89, 0xbc, 0x60, 0x62, 0xd1, 0xac, 0xc4, 0x62, 0x7e, 0x9d, 0x49, 0x85, 0x5e,
	0xe3, 0x1c, 0x94, 0xb9, 0xc5, 0xac, 0x7d, 0xe7, 0x09, 0xda, 0x5f, 0xdc, 0xae, 0x6a, 0xaf, 0x7c,
	0xb0, 0xf6, 0x1f, 0xcb, 0xe8, 0xda, 0x7c, 0x1f, 0x3f, 0x40, 0xf9, 0xcb, 0xeb, 0x8a, 0x1f, 0xd3,
	0x11, 0x33, 0x2f, 0xd5, 0xb8, 0x98, 0x38, 0xbf, 0x2d, 0x86, 0xf7, 0x93, 0xc9, 0x6c, 0x11, 0xf7,
	0x51, 0x53, 0x32, 0x49, 0xc6, 0x79, 0xb8, 0xc3, 0x2c, 0x80, 0xd0, 0x1f, 0x8e, 0x59, 0xf0, 0x4c,
	0xf8, 0x31, 0x35, 0xb1, 0x57, 0x69, 0x5f, 0xf5, 0xf6, 0x14, 0x6c, 0x60, 0x50, 0x3d, 0x05, 0x3a,
	0xa4, 0x3a, 0xc6, 0xf8, 0x29, 0xc2, 0x29, 0xf0, 0x11, 0xe3, 0x09, 0xa1, 0x01, 0xf8, 0x9c, 0xc8,
	0x98, 0x46, 0x3a, 0xc4, 0x57, 0x09, 0xe7, 0xd6, 0x0c, 0x99, 0xa7, 0xb8, 0xf0, 0xd7, 0x68, 0x13,
	0x4e, 0x53, 0x08, 0x24, 0x84, 0x45, 0x44, 0x4d, 0xf8, 0x0f, 0xde, 0x9b, 0x4d, 0xaf, 0x56, 0x2c,
	0x33, 0x89, 0xbc, 0xfb, 0xfb, 0x2a, 0x5a, 0x53, 0xe7, 0x85, 0x25, 0x5a, 0xd7, 0x63, 0x08, 0xdf,
	0xac, 0x6c, 0x5d, 0x75, 0xd6, 0xd5, 0x3f, 0x7b, 0x3f, 0x48, 0x9f, 0xb6, 0xd3, 0xfc, 0xe1, 0xcf,
	0x7f, 0x7f, 0x5e, 0xde, 0xc5, 0x3b, 0xee, 0xe2, 0x41, 0x8b, 0x7f, 0xb4, 0xd0, 0xc6, 0xcc, 0x10,
	0xc3, 0xed, 0x8b, 0x68, 0xcb, 0x33, 0xb0, 0x7e, 0xeb, 0x12, 0x48, 0xe3, 0xe2, 0x73, 0xe5, 0xa2,
	0x89, 0x0f, 0x16, 0xb8, 0xd0, 0x83, 0x32, 0x0f, 0x0e, 0xfe, 0xc5, 0xaa, 0xa4, 0xeb, 0xf6, 0x62,
	0x91, 0x85, 0x37, 0xb7, 0xfe, 0xc5, 0xe5, 0xc0, 0xc6, 0x54, 0x5b, 0x99, 0x72, 0x70, 0xab, 0x62,
	0xea, 0x5d, 0x9e, 0x55, 0xea, 0xf1, 0xaf, 0x16, 0xaa, 0x95, 0xae, 0x13, 0xfe, 0x3f, 0xad, 0xb9,
	0x4b, 0x59, 0xef, 0x5c, 0x12, 0x6d, 0xac, 0xdd, 0x52, 0xd6, 0x6e, 0xe2, 0x1b, 0x17, 0x5b, 0x13,
	0xda, 0x5b, 0xef, 0xc1, 0xcb, 0xb3, 0x86, 0xf5, 0xea, 0xac, 0x61, 0xfd, 0x73, 0xd6, 0xb0, 0x7e,
	0x3a, 0x6f, 0x2c, 0xbd, 0x3a, 0x6f, 0x2c, 0xfd, 0x75, 0xde, 0x58, 0x7a, 0x7c, 0x27, 0x8a, 0xe5,
	0x71, 0x36, 0xec, 0x06, 0x2c, 0x29, 0x68, 0x3a, 0x8c, 0x47, 0x6f, 0x29, 0x27, 0xf7, 0xdc, 0xd3,
	0x77, 0x1f, 0xd6, 0x69, 0x0a, 0x62, 0xb8, 0xae, 0x3e, 0xae, 0x5f, 0xfe, 0x17, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0xe8, 0xac, 0x50, 0x45, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Fetches the current parameters of the revenue module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Fetches the current payment info of the module such as payment schedule and revenue details.
	PaymentInfo(ctx context.Context, in *QueryPaymentInfoRequest, opts ...grpc.CallOption) (*QueryPaymentInfoResponse, error)
	// Fetches a given validator's stats from the revenue module's state.
	ValidatorStats(ctx context.Context, in *QueryValidatorStatsRequest, opts ...grpc.CallOption) (*QueryValidatorStatsResponse, error)
	// Fetches all validators' stats from the revenue module's state.
	ValidatorsStats(ctx context.Context, in *QueryValidatorsStatsRequest, opts ...grpc.CallOption) (*QueryValidatorsStatsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/neutron.revenue.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentInfo(ctx context.Context, in *QueryPaymentInfoRequest, opts ...grpc.CallOption) (*QueryPaymentInfoResponse, error) {
	out := new(QueryPaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/neutron.revenue.Query/PaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorStats(ctx context.Context, in *QueryValidatorStatsRequest, opts ...grpc.CallOption) (*QueryValidatorStatsResponse, error) {
	out := new(QueryValidatorStatsResponse)
	err := c.cc.Invoke(ctx, "/neutron.revenue.Query/ValidatorStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorsStats(ctx context.Context, in *QueryValidatorsStatsRequest, opts ...grpc.CallOption) (*QueryValidatorsStatsResponse, error) {
	out := new(QueryValidatorsStatsResponse)
	err := c.cc.Invoke(ctx, "/neutron.revenue.Query/ValidatorsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Fetches the current parameters of the revenue module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Fetches the current payment info of the module such as payment schedule and revenue details.
	PaymentInfo(context.Context, *QueryPaymentInfoRequest) (*QueryPaymentInfoResponse, error)
	// Fetches a given validator's stats from the revenue module's state.
	ValidatorStats(context.Context, *QueryValidatorStatsRequest) (*QueryValidatorStatsResponse, error)
	// Fetches all validators' stats from the revenue module's state.
	ValidatorsStats(context.Context, *QueryValidatorsStatsRequest) (*QueryValidatorsStatsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PaymentInfo(ctx context.Context, req *QueryPaymentInfoRequest) (*QueryPaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentInfo not implemented")
}
func (*UnimplementedQueryServer) ValidatorStats(ctx context.Context, req *QueryValidatorStatsRequest) (*QueryValidatorStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorStats not implemented")
}
func (*UnimplementedQueryServer) ValidatorsStats(ctx context.Context, req *QueryValidatorsStatsRequest) (*QueryValidatorsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorsStats not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.revenue.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.revenue.Query/PaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentInfo(ctx, req.(*QueryPaymentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.revenue.Query/ValidatorStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorStats(ctx, req.(*QueryValidatorStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.revenue.Query/ValidatorsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorsStats(ctx, req.(*QueryValidatorsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.revenue.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PaymentInfo",
			Handler:    _Query_PaymentInfo_Handler,
		},
		{
			MethodName: "ValidatorStats",
			Handler:    _Query_ValidatorStats_Handler,
		},
		{
			MethodName: "ValidatorsStats",
			Handler:    _Query_ValidatorsStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neutron/revenue/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPaymentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BaseRevenueAmount.Size()
		i -= size
		if _, err := m.BaseRevenueAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RewardDenomTwap.Size()
		i -= size
		if _, err := m.RewardDenomTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.EffectivePeriodProgress.Size()
		i -= size
		if _, err := m.EffectivePeriodProgress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PaymentSchedule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValOperAddress) > 0 {
		i -= len(m.ValOperAddress)
		copy(dAtA[i:], m.ValOperAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValOperAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExpectedRevenue.Size()
		i -= size
		if _, err := m.ExpectedRevenue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PerformanceRating.Size()
		i -= size
		if _, err := m.PerformanceRating.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TotalProducedBlocksInPeriod != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalProducedBlocksInPeriod))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ValidatorInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPaymentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentSchedule.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EffectivePeriodProgress.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.RewardDenomTwap.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BaseRevenueAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatorStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValOperAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatorsStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryValidatorsStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ValidatorStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.TotalProducedBlocksInPeriod != 0 {
		n += 1 + sovQuery(uint64(m.TotalProducedBlocksInPeriod))
	}
	l = m.PerformanceRating.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExpectedRevenue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectivePeriodProgress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectivePeriodProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenomTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardDenomTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRevenueAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseRevenueAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValOperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValOperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ValidatorStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProducedBlocksInPeriod", wireType)
			}
			m.TotalProducedBlocksInPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProducedBlocksInPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceRating", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerformanceRating.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedRevenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
