syntax = "proto3";
package neutron.harpoon;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/neutron-org/neutron/v5/x/harpoon/types";

// Defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Defines a operation for updating hook subscriptions for a given contract_address.
  // Pass empty array to `hooks` to remove subscription from this contract_address.
  // Only executable by governance.
  rpc ManageHookSubscription(MsgManageHookSubscription) returns (MsgManageHookSubscriptionResponse);
}

// Defines the Msg/ManageHookSubscription request type.
message MsgManageHookSubscription {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "neutron/x/harpoon/MsgManageHookSubscription";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // hook_subscription describes what new subscription is going to be.
  HookSubscription hook_subscription = 2;
}

// Defines the response structure for executing a MsgManageHookSubscription message.
message MsgManageHookSubscriptionResponse {}

// Describes new hook subscriptions for contract_address
message HookSubscription {
  // hook_subscription specifies for which contract_address modify the subscriptions.
  string contract_address = 2; // Address of the contract to manage hooks for

  // hooks specifies what hooks are we gonna subscribe to. Existing hooks not specified here will be removed.
  repeated HookType hooks = 3; // List of hooks to subscribe/unsubscribe. Pass empty to remove subscription.
}

// Specifies concrete hooks that can be subscribed to.
enum HookType {
  AfterValidatorCreated = 0; // Called when a validator is created
  BeforeValidatorModified = 1; // Called when a validator is modified
  AfterValidatorRemoved = 2; // Called when a validator is deleted
  AfterValidatorBonded = 3; // Called when a validator is bonded
  AfterValidatorBeginUnbonding = 4; // Called when a validator begins unbonding
  BeforeDelegationCreated = 5; // Called when a delegation is created
  BeforeDelegationSharesModified = 6; // Called when a delegation's shares are modified
  BeforeDelegationRemoved = 7; // Called when a delegation is removed
  AfterDelegationModified = 8; // Called when a delegation is modified
  BeforeValidatorSlashed = 9; // Called before validator is slashed
  AfterUnbondingInitiated = 10; // Called after unbonding is initiated
}
