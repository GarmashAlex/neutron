syntax = "proto3";
package neutron.revenue;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/neutron-org/neutron/v5/x/revenue/types";

// Defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // The denom to be used for compensation.
  string denom_compensation = 1;

  // The compensation amount in USD.
  uint64 base_compensation = 2;

  // Specifies performance requirements for validators in scope of blocks signing and creation. If
  // not met, the validator is not rewarded.
  PerformanceRequirement blocks_performance_requirement = 3;

  // Specifies performance requirements for validators in scope of the oracle price votes. If not
  // met, the validator is not rewarded.
  PerformanceRequirement oracle_votes_performance_requirement = 4;

  // Indicates the currently active type of payment schedule.
  oneof payment_schedule_type {
    MonthlyPaymentScheduleType monthly_payment_schedule_type = 5 [(amino.oneof_name) = "revenue/Params/MonthlyPaymentScheduleType"];
    BlockBasedPaymentScheduleType block_based_payment_schedule_type = 6 [(amino.oneof_name) = "revenue/Params/BlockBasedPaymentScheduleType"];
    EmptyPaymentScheduleType empty_payment_schedule_type = 7 [(amino.oneof_name) = "revenue/Params/EmptyPaymentScheduleType"];
  }
}

// Monthly periods with payments made at the end of each month.
message MonthlyPaymentScheduleType {}

// Periods defined by a specific number of blocks, with payments made when the required block
// count is reached.
message BlockBasedPaymentScheduleType {
  // The number of blocks in a payment period.
  uint64 blocks_per_period = 1;
}

// Endless periods with payments never made.
message EmptyPaymentScheduleType {}

// Specifies a performance criteria that validators must meet to qualify for network rewards.
message PerformanceRequirement {
  // The fraction of the total performance a validator can miss without affecting their reward.
  // Represented as a decimal value in the range [0.0, 1.0], where 1.0 corresponds to 100%.
  string allowed_to_miss = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // The minimum fraction of the total performance a validator must achieve to be eligible for
  // network rewards. Validators falling below this threshold will not receive any rewards.
  // Represented as a decimal value in the range [0.0, 1.0], where 1.0 corresponds to 100%.
  string required_at_least = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}
