syntax = "proto3";
package neutron.revenue;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "ibc/core/client/v1/client.proto";
import "neutron/revenue/params.proto";

option go_package = "github.com/neutron-org/neutron/v5/x/revenue/types";

// Defines the revenue module's genesis state.
message GenesisState {
  // Revenue module parameters.
  Params params = 1 [(gogoproto.nullable) = false];

  // Revenue module state.
  State state = 2 [(gogoproto.nullable) = false];

  // Revenue module list of validators.
  repeated ValidatorInfo validators = 3 [(gogoproto.nullable) = false];

  // CumulativePrices is accumulate prices of the Revenue denom to calculate TWAP price for a given period of time
  repeated CumulativePrice cumulative_prices = 4;
}

// Contains information about a validator.
message ValidatorInfo {
  // The validator's consensus node address.
  string consensus_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The number of blocks commited by the validator in the current payment period.
  uint64 commited_blocks_in_period = 2;

  // The number of oracle votes commited by the validator in the current payment period.
  uint64 commited_oracle_votes_in_period = 3;
}

// Contains information about the current state of the revenue module.
message State {
  // Information specific to the current payment schedule. This can represent different types of
  // payment schedules (e.g., monthly or block-based).
  google.protobuf.Any payment_schedule = 1 [(cosmos_proto.accepts_interface) = "neutron.revenue.PaymentSchedule"];
}

// Represents a payment schedule where revenue payments are processed once a month.
message MonthlyPaymentSchedule {
  option (amino.name) = "neutron/MonthlyPaymentSchedule";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = false;
  option (cosmos_proto.implements_interface) = "neutron.revenue.PaymentSchedule";

  // A numeric representation of the current month.
  uint64 current_month = 1;
  // The block height at which the current month started.
  uint64 current_month_start_block = 2;
}

// Represents a payment schedule where revenue payments are processed after a specified number
// of blocks.
message BlockBasedPaymentSchedule {
  option (amino.name) = "neutron/BlockBasedPaymentSchedule";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = false;
  option (cosmos_proto.implements_interface) = "neutron.revenue.PaymentSchedule";

  // The number of blocks in each payment period.
  uint64 blocks_per_period = 1;
  // The block height at which the current payment period started.
  uint64 current_period_start_block = 2;
}

// Represents a payment schedule where revenue is never distributed.
message EmptyPaymentSchedule {
  option (amino.name) = "neutron/EmptyPaymentSchedule";
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = false;
  option (cosmos_proto.implements_interface) = "neutron.revenue.PaymentSchedule";
}

// Represents a type that contains the cumulative price of an asset over the
// entire observation period, as well as the last recorded asset price
// and the timestamp at which this price is valid.
//
// It is used to calculate TWAP as:
// twap_from_time_t(n)_to_time_t(n-1) = (cumulative_price_at_t(n) - cumulative_price_at_t(n-1))/(t(n) - t(n-1))
message CumulativePrice {
  // Cumulative price of a denom from the start of monitoring to the last block
  // calculates as
  // `cumulative_price at timestamp t(n)` = `last_price at t(n-1)` * (t(n) - t(n-1)) + `cumulative_price at timestamp t(n-1)`
  string cumulative_price = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // Specifies the price at the current timestamp
  string last_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // The timestamp when the price has been saved.
  int64 timestamp = 3;
}
