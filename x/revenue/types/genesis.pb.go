// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/revenue/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the revenue module's genesis state.
type GenesisState struct {
	// Revenue module parameters.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Revenue module state.
	State State `protobuf:"bytes,2,opt,name=state,proto3" json:"state"`
	// Revenue module list of validators.
	Validators []ValidatorInfo `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetState() State {
	if m != nil {
		return m.State
	}
	return State{}
}

func (m *GenesisState) GetValidators() []ValidatorInfo {
	if m != nil {
		return m.Validators
	}
	return nil
}

// Contains information about a validator.
type ValidatorInfo struct {
	// The validator's operator address.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// The validator's consensus node address.
	ConsensusAddress string `protobuf:"bytes,2,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
	// The number of blocks commited by the validator in the current month.
	CommitedBlocksInMonth uint64 `protobuf:"varint,3,opt,name=commited_blocks_in_month,json=commitedBlocksInMonth,proto3" json:"commited_blocks_in_month,omitempty"`
	// The number of oracle votes commited by the validator in the current month.
	CommitedOracleVotesInMonth uint64 `protobuf:"varint,4,opt,name=commited_oracle_votes_in_month,json=commitedOracleVotesInMonth,proto3" json:"commited_oracle_votes_in_month,omitempty"`
}

func (m *ValidatorInfo) Reset()         { *m = ValidatorInfo{} }
func (m *ValidatorInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorInfo) ProtoMessage()    {}
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{1}
}
func (m *ValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfo.Merge(m, src)
}
func (m *ValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfo proto.InternalMessageInfo

func (m *ValidatorInfo) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *ValidatorInfo) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

func (m *ValidatorInfo) GetCommitedBlocksInMonth() uint64 {
	if m != nil {
		return m.CommitedBlocksInMonth
	}
	return 0
}

func (m *ValidatorInfo) GetCommitedOracleVotesInMonth() uint64 {
	if m != nil {
		return m.CommitedOracleVotesInMonth
	}
	return 0
}

// Contains information about the current state of the revenue module.
type State struct {
	// A numeric representation of the current month.
	CurrentMonth int32 `protobuf:"varint,1,opt,name=current_month,json=currentMonth,proto3" json:"current_month,omitempty"`
	// The number of blocks commited in the current month.
	BlockCounter uint64 `protobuf:"varint,2,opt,name=block_counter,json=blockCounter,proto3" json:"block_counter,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece0d8a368090adb, []int{2}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetCurrentMonth() int32 {
	if m != nil {
		return m.CurrentMonth
	}
	return 0
}

func (m *State) GetBlockCounter() uint64 {
	if m != nil {
		return m.BlockCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "neutron.revenue.GenesisState")
	proto.RegisterType((*ValidatorInfo)(nil), "neutron.revenue.ValidatorInfo")
	proto.RegisterType((*State)(nil), "neutron.revenue.State")
}

func init() { proto.RegisterFile("neutron/revenue/genesis.proto", fileDescriptor_ece0d8a368090adb) }

var fileDescriptor_ece0d8a368090adb = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xfe, 0x99, 0x84, 0xd7, 0x6a, 0x23, 0x1a, 0x10, 0x2a, 0xc8, 0xaa, 0xee, 0xd2,
	0xcb, 0x62, 0xb5, 0x68, 0xe2, 0x4c, 0x06, 0x42, 0x13, 0x42, 0x40, 0x26, 0xed, 0xc0, 0x25, 0x4a,
	0xdc, 0x97, 0x2c, 0xa2, 0xf1, 0x5b, 0xd9, 0x4e, 0x04, 0xdf, 0x82, 0x23, 0x1f, 0x84, 0x3b, 0xd7,
	0x1d, 0x27, 0x4e, 0x9c, 0x10, 0x6a, 0xbf, 0x08, 0x8a, 0xed, 0x54, 0x63, 0x3d, 0xec, 0x66, 0x3f,
	0xcf, 0xf3, 0x7b, 0xe2, 0x37, 0x36, 0x79, 0xca, 0xa1, 0x54, 0x02, 0x39, 0x15, 0x50, 0x01, 0x2f,
	0x81, 0x66, 0xc0, 0x41, 0xe6, 0x32, 0x58, 0x0a, 0x54, 0xe8, 0xee, 0x59, 0x3b, 0xb0, 0xf6, 0xd0,
	0x67, 0x28, 0x0b, 0x94, 0x34, 0x4d, 0x24, 0xd0, 0x6a, 0x9a, 0x82, 0x4a, 0xa6, 0x94, 0x61, 0xce,
	0x0d, 0x30, 0x7c, 0x6c, 0xfc, 0x58, 0xef, 0xa8, 0xd9, 0x58, 0xeb, 0x20, 0xc3, 0x0c, 0x8d, 0x5e,
	0xaf, 0xac, 0x7a, 0x98, 0xa7, 0x8c, 0x32, 0x14, 0x40, 0xd9, 0x22, 0x07, 0xae, 0x68, 0x35, 0xb5,
	0x2b, 0x1b, 0x78, 0x72, 0xfb, 0x84, 0xcb, 0x44, 0x24, 0x85, 0x2d, 0x1d, 0xff, 0x74, 0x48, 0xff,
	0xb5, 0x39, 0xf2, 0xb9, 0x4a, 0x14, 0xb8, 0x27, 0x64, 0xc7, 0x04, 0x3c, 0x67, 0xe4, 0x4c, 0x76,
	0x67, 0x8f, 0x82, 0x5b, 0x23, 0x04, 0xef, 0xb5, 0x1d, 0x76, 0xaf, 0xfe, 0x1c, 0xb6, 0x22, 0x1b,
	0x76, 0x67, 0xa4, 0x27, 0x6b, 0xde, 0x6b, 0x6b, 0xea, 0xe1, 0x16, 0xa5, 0xdb, 0x2d, 0x64, 0xa2,
	0xee, 0x4b, 0x42, 0xaa, 0x64, 0x91, 0xcf, 0x13, 0x85, 0x42, 0x7a, 0x9d, 0x51, 0x67, 0xb2, 0x3b,
	0xf3, 0xb7, 0xc0, 0x8b, 0x26, 0x72, 0xc6, 0x3f, 0xa1, 0x2d, 0xb8, 0xc1, 0x8d, 0xbf, 0xb7, 0xc9,
	0xe0, 0xbf, 0x8c, 0x7b, 0x4a, 0xf6, 0x71, 0x09, 0xa2, 0xde, 0xc7, 0xc9, 0x7c, 0x2e, 0x40, 0x9a,
	0x61, 0xee, 0x85, 0xde, 0xaf, 0x1f, 0xc7, 0x07, 0xf6, 0xa7, 0xbe, 0x30, 0xce, 0xb9, 0x12, 0x39,
	0xcf, 0xa2, 0xbd, 0x86, 0xb0, 0xb2, 0xfb, 0x8a, 0xdc, 0x67, 0xc8, 0x25, 0x70, 0x59, 0xca, 0x4d,
	0x4b, 0xfb, 0x8e, 0x96, 0xfd, 0x0d, 0xd2, 0xd4, 0x3c, 0x27, 0x1e, 0xc3, 0xa2, 0xc8, 0x15, 0xcc,
	0xe3, 0x74, 0x81, 0xec, 0xb3, 0x8c, 0x73, 0x1e, 0x17, 0xc8, 0xd5, 0xa5, 0xd7, 0x19, 0x39, 0x93,
	0x6e, 0xf4, 0xa0, 0xf1, 0x43, 0x6d, 0x9f, 0xf1, 0xb7, 0xb5, 0xe9, 0x86, 0xc4, 0xdf, 0x80, 0x28,
	0x12, 0xb6, 0x80, 0xb8, 0x42, 0x05, 0x37, 0xf0, 0xae, 0xc6, 0x87, 0x4d, 0xea, 0x9d, 0x0e, 0x5d,
	0xd4, 0x19, 0xdb, 0x31, 0xfe, 0x40, 0x7a, 0xe6, 0x52, 0x8f, 0xc8, 0x80, 0x95, 0x42, 0x00, 0x57,
	0x96, 0xad, 0x7f, 0x47, 0x2f, 0xea, 0x5b, 0xd1, 0x7c, 0xf1, 0x88, 0x0c, 0xf4, 0x09, 0x63, 0x86,
	0x25, 0x57, 0x20, 0xf4, 0xb4, 0xdd, 0xa8, 0xaf, 0xc5, 0x53, 0xa3, 0x85, 0x6f, 0xae, 0x56, 0xbe,
	0x73, 0xbd, 0xf2, 0x9d, 0xbf, 0x2b, 0xdf, 0xf9, 0xb6, 0xf6, 0x5b, 0xd7, 0x6b, 0xbf, 0xf5, 0x7b,
	0xed, 0xb7, 0x3e, 0x4e, 0xb3, 0x5c, 0x5d, 0x96, 0x69, 0xc0, 0xb0, 0xa0, 0xf6, 0x0e, 0x8f, 0x51,
	0x64, 0xcd, 0x9a, 0x56, 0x27, 0xf4, 0xcb, 0xe6, 0x0d, 0xaa, 0xaf, 0x4b, 0x90, 0xe9, 0x8e, 0x7e,
	0x83, 0xcf, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xef, 0x6e, 0x36, 0xc3, 0x45, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommitedOracleVotesInMonth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommitedOracleVotesInMonth))
		i--
		dAtA[i] = 0x20
	}
	if m.CommitedBlocksInMonth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CommitedBlocksInMonth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockCounter != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlockCounter))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentMonth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CurrentMonth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.State.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.CommitedBlocksInMonth != 0 {
		n += 1 + sovGenesis(uint64(m.CommitedBlocksInMonth))
	}
	if m.CommitedOracleVotesInMonth != 0 {
		n += 1 + sovGenesis(uint64(m.CommitedOracleVotesInMonth))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentMonth != 0 {
		n += 1 + sovGenesis(uint64(m.CurrentMonth))
	}
	if m.BlockCounter != 0 {
		n += 1 + sovGenesis(uint64(m.BlockCounter))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorInfo{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitedBlocksInMonth", wireType)
			}
			m.CommitedBlocksInMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitedBlocksInMonth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitedOracleVotesInMonth", wireType)
			}
			m.CommitedOracleVotesInMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitedOracleVotesInMonth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMonth", wireType)
			}
			m.CurrentMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMonth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCounter", wireType)
			}
			m.BlockCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
